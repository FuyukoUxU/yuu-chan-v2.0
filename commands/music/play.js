const Discord = require('discord.js')
const DisTube = require('distube')

module.exports = {
    name: "play",
    category: "music",
    info: 'Kh√¥ng n√™n t√¨m l·ªánh ·ªü d√≤ng L·ªánh m·ªü r·ªông nh√© ! Kh√° h·∫°i m·∫Øt ƒë·∫•y',
    aliases: ['loop','skip','queue','stop','autoplay','resume','pause','queue','seek','jump','vol','3d','bassboost','echo','karaoke','nightcore','vaporwave',`flanger`,`gate`,`haas`,`reverse`,`surround`,`mcompand`,`phaser`,`tremolo`,`earwax`],
    description: "L·ªánh ph√°t nh·∫°c",
    usage: '_[C√¢u l·ªánh]',
    dong: '------------------------------------------------------------------------',
    dong1: '`play`, `skip`, `stop`, `pause`, `resume`',
    dong2: '`loop`, `queue`, `seek`, `jump`',
    dong3: '`3d`, `bassboost`, `echo`, `karaoke`, `nightcore`, `vaporwave`, `flanger`, `gate`, `haas`, `reverse`, `surround`, `mcompand`, `phaser`, `tremolo`, `earwax`',
    dong4: '`vol`, `autoplay`',
    run: async (client, message, args , command , distube) => {
        if (message.channel.type == 'dm') return message.channel.send("L·ªánh n√†y kh√¥ng th·ªÉ d√πng ·ªü ƒë√¢y !");
        const voice_channel = message.member.voice.channel;
        if (!voice_channel) return message.channel.send('V√†o k√™nh voice r·ªìi th·ª≠ l·∫°i!');
        const permissions = voice_channel.permissionsFor(message.client.user);
        if (!permissions.has('CONNECT')) return message.channel.send('B·∫°n kh√¥ng c√≥ quy·ªÅn k·∫øt n·ªëi k√™nh voice');
        if (!permissions.has('SPEAK')) return message.channel.send('B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn v·ªõi k√™nh voice');

    if (command == "play")
        distube.play(message, args.join(" "));

    if (command == "loop"){
        if(0 <= Number(args[0]) && Number(args[0]) <= 2){
            distube.setRepeatMode(message,parseInt(args[0]))
            embedbuilder(client, message, "GREEN", "Ch·∫ø ƒë·ªô l·∫∑p ƒë∆∞·ª£c ƒë·∫∑t:", `${args[0].replace("0", "T·∫Øt").replace("1", ":repeat_one: L·∫∑p b√†i hi·ªán t·∫°i").replace("2", ":repeat: L·∫∑p danh s√°ch ph√°t")}`)
        }
        else{
            embedbuilder(client, message, "RED", "L·ªói", ':loop: B·∫°n c·∫ßn ƒë·∫∑t ch·∫ø ƒë·ªô l·∫∑p h·ª£p l·ªá !\nH∆∞·ªõng d·∫´n: ·∫§n _loop (s·ªë) | `0`: T·∫Øt l·∫∑p ; `1`: L·∫∑p b√†i hi·ªán t·∫°i ; `2`: L·∫∑p c·∫£ danh s√°ch ph√°t')
        }
    };

    if (command == "stop") {
        distube.stop(message);
        embedbuilder(client, message, "RED", "ƒêang tho√°t...", `:eject: Em ƒë√£ r·ªùi kh·ªèi voice channel r·ªìi nh√© !`)
    };

    if (command == "skip") {
        try{
            distube.skip(message);
            embedbuilder(client, message, "YELLOW", "B·ªè qua", `:track_next: ƒê√£ b·ªè qua b√†i h√°t ! `)
        } catch {
          return;
        }
    }

    if (command == "pause") {
        try{
            distube.pause(message);
            distube.resume(message);
            distube.pause(message);
            embedbuilder(client, message, "YELLOW", "T·∫°m d·ª´ng", `:pause_button: ƒêang t·∫°m d·ª´ng b√†i h√°t ! `)
        } catch {
          return;
        }
    }

    if (command == "resume") {
        try{
            distube.resume(message);
            embedbuilder(client, message, "YELLOW", "Ti·∫øp t·ª•c", `:arrow_forward: B√†i h√°t ti·∫øp t·ª•c ph√°t ! `)
        } catch {
          return;
        }
    }

    if (command == "autoplay") {
        let mode = distube.toggleAutoplay(message);
        embedbuilder(client, message, "YELLOW", "T·ª± ƒë·ªông ph√°t", "Ch·∫ø ƒë·ªô hi·ªán t·∫°i `" + (mode ? "On" : "Off") + "`")
    }

    if (command == "queue") {
        let queue = distube.getQueue(message);
        if(queue) {
        let curqueue = queue.songs.map((song, id) =>
        `**${id + 1}**. ${song.name} - \`${song.formattedDuration}\``
        ).slice(0, 10).join("\n");
        return  embedbuilder(client, message, "GREEN", "Danh s√°ch ph√°t hi·ªán t·∫°i (10 Video ti·∫øp theo)", curqueue)
        } else {
        if(!queue){
            return  embedbuilder(client, message, "L·ªói", "Kh√¥ng c√≥ nh·∫°c trong danh s√°ch ƒë·ª£i üòî")
        }}
    };

    if( command == "seek") {
        if (!args[0]) return message.reply("H√£y nh·∫≠p s·ªë gi√¢y c·∫ßn tua")
        if(isNaN(args[0])) return message.reply("S·ªë gi√¢y kh√¥ng h·ª£p l·ªá");
        distube.seek(message, Number(args[0]*1000));
        embedbuilder(client, message, "GREEN", "Tua video", `:fast_forward: Tua ƒë·∫øn gi√¢y \`${args[0]}\``)
    };

    if( command == "vol") {
        if (!args[0]) return message.reply("B·∫°n h√£y nh·∫≠p m·ª©c √¢m l∆∞·ª£ng `%`")
        if(isNaN(args[0])) return message.reply("M·ª©c √¢m l∆∞·ª£ng kh√¥ng h·ª£p l·ªáüö´");
        if (args[0] > 49) {
            embedbuilder(client, message, "GREEN", "Volume", `:loud_sound: √Çm l∆∞·ª£ng hi·ªán t·∫°i l√† \`${args[0]} %\``)
            return distube.setVolume(message, args[0]);
        }
        if (0 < args[0] && args[0] < 50) {
            embedbuilder(client, message, "GREEN", "Volume", `:sound: √Çm l∆∞·ª£ng hi·ªán t·∫°i l√† \`${args[0]} %\``)
            return distube.setVolume(message, args[0]);
        }
        if (args[0] == 0) {
            embedbuilder(client, message, "GREEN", "Volume", `:mute: B·∫°n ƒë√£ t·∫Øt ti·∫øng !`)
            return distube.setVolume(message, args[0]);
        }
    };

    if( command === "jump") {
        let queue = distube.getQueue(message);
        if(0 <= Number(args[0]) && Number(args[0]) <= queue.songs.length){
            embedbuilder(client, message, "RED", "Ph√°t nh·∫°c", `Chuy·ªÉn t·ªõi b√†i ${parseInt(args[0])} !`)
            return distube.jump(message, parseInt(args[0]))
            .catch(err => message.channel.send("S·ªë th·ª© t·ª± nh·∫°c kh√¥ng h·ª£p l·ªá."));
        }
        else{
            embedbuilder(client, message, "RED", "L·ªói", `Nh·∫≠p s·ªë th·ª© t·ª± b√†i h·ª£p l·ªá` )
        }
        }
    
    if ([`3d`, `bassboost`, `echo`, `karaoke`, `nightcore`, `vaporwave`, `flanger`, `gate`, `haas`, `reverse`, `surround`, `mcompand`, `phaser`, `tremolo`, `earwax`].includes(command)) {
        let filter = distube.setFilter(message, command);
        return embedbuilder(client, message, "YELLOW", ":arrows_counterclockwise: ƒêang t·∫£i hi·ªáu ·ª©ng nh·∫°c: ", filter || "T·∫Øt")
    };
    function embedbuilder(client, message, color, title, description, url, thumbnail){
        let embed = new Discord.MessageEmbed()
        .setColor(color)
        .setFooter(client.user.username, client.user.displayAvatarURL());
        if(title) embed.setTitle(title);
        if(description) embed.setDescription(description);
        if(thumbnail) embed.setThumbnail(thumbnail);
        if(url) embed.setURL(url);
        return message.channel.send(embed);
    }

}};
